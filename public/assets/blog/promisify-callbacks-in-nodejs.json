{"title":"Bye bye Callbacks, hello Promises in NodeJS","description":"Completely get rid of callbacks in NodeJS and replace them with the great Promises.","date":"25 Jan 2021 12:00 AM","cover_image":"media/promisify-callbacks-in-nodejs-promises-everywhere.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 55.58333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"/assets//media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"/assets//media/promisify-callbacks-in-nodejs-promises-everywhere/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"/assets//media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>These is gonna be a meme-tastic blog post. Strap yourself in.</p>\n<p>So, I guess you read the [super]clickbaity title, and couldn't resist it, huh? Well, no worries, I <strong>promise</strong> you <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\"> this is gonna be good.</p>\n<h1 id=\"History-lesson\"><a class=\"heading-link\" href=\"./promisify-callbacks-in-nodejs#History-lesson\">#</a>History lesson <img class=\"emoji\" draggable=\"false\" alt=\"😴\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f634.svg\"></h1>\n<p>NodeJS initially shipped with callbacks for its amazing asynchronous model which made it an overnight star in the first place. And callbacks were cool. You could read a huge file, and write the code in such a way to simply wait for the response to come out. This applied to database reads, XHR calls(ajax). This model was groundbreaking when it came out.</p>\n<p>Callbacks follow this pattern <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #3FC56B\">callback</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">param1</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> param2</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> param3</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">error</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> data</span><span style=\"color: #7A82DA\">))</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #636D83\">// Do something</span></span>\n<span class=\"line\"><span style=\"color: #7A82DA\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note, there can be any number of parameters before the actual callback as the last parameter, and the callback doesn't have to have only <code>data</code> either, it can be any number of parameters, or not have any, other than the <code>error</code>.</p>\n<p>But there's a funny thing that happens when you dive super deep into something. <strong>YoU fInD oUt ItS fLaWs.</strong> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">fs</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">readdir</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">source</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">err</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">files</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #10B1FE\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">err</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'Error finding files: '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> err</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">}</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    files</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">forEach</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #10B1FE\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">filename</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">fileIndex</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">filename</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #3FC56B\">gm</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">source </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> filename</span><span style=\"color: #7A82DA\">).</span><span style=\"color: #3FC56B\">size</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #10B1FE\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">err</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">values</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #10B1FE\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">err</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'Error identifying file size: '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> err</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7A82DA\">}</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">filename </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #F9C859\">' : '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> values</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          aspect </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> values</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #CE9887\">width</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">/</span><span style=\"color: #ABB2BF\"> values</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #CE9887\">height</span><span style=\"color: #7A82DA\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          widths</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">forEach</span><span style=\"color: #7A82DA\">(</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #10B1FE\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">width</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">widthIndex</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">              height </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">Math</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">round</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">width </span><span style=\"color: #7A82DA\">/</span><span style=\"color: #ABB2BF\"> aspect</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">              console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'resizing '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> filename </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #F9C859\">'to '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> height </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #F9C859\">'x'</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> height</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">              </span><span style=\"color: #10B1FE\">this</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">resize</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">width</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> height</span><span style=\"color: #7A82DA\">).</span><span style=\"color: #3FC56B\">write</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">dest </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #F9C859\">'w'</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> width </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #F9C859\">'_'</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> filename</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">err</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #10B1FE\">if</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">err</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> console</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">log</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'Error writing file: '</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">+</span><span style=\"color: #ABB2BF\"> err</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">              </span><span style=\"color: #7A82DA\">});</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #7A82DA\">}.</span><span style=\"color: #3FC56B\">bind</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #10B1FE\">this</span><span style=\"color: #7A82DA\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7A82DA\">}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #7A82DA\">});</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7A82DA\">});</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">}</span></span>\n<span class=\"line\"><span style=\"color: #7A82DA\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Oh boy, my eyes bleed <img class=\"emoji\" draggable=\"false\" alt=\"🙈\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f648.svg\"></p>\n<p>I guess this twitter meme was on point <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/assets//media/promisify-callbacks-in-nodejs-goku-meme/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/assets//media/promisify-callbacks-in-nodejs-goku-meme.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"Enter-promises\"><a class=\"heading-link\" href=\"./promisify-callbacks-in-nodejs#Enter-promises\">#</a>Enter promises</h1>\n<p>Promises radicalized the whole scene. They made our code even cleaner. They follow a much simpler structure. No need for all that indentation inside indentation inside indentation. Max to max 1 level of indentation is needed</p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">finalData</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">fetch</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'https://api.example/com'</span><span style=\"color: #7A82DA\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">then</span><span style=\"color: #7A82DA\">((</span><span style=\"color: #8BCDEF\">req</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span><span style=\"color: #ABB2BF\"> req</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">json</span><span style=\"color: #7A82DA\">())</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">then</span><span style=\"color: #7A82DA\">((</span><span style=\"color: #8BCDEF\">data</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">cleanUpData</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">data</span><span style=\"color: #7A82DA\">))</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">then</span><span style=\"color: #7A82DA\">((</span><span style=\"color: #8BCDEF\">data</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">doEpicShit</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">data</span><span style=\"color: #7A82DA\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Using the <code>.then</code> pattern made life super easy.</p>\n<p>And then came <mark>async/await</mark>. Above code became even simpler:</p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">req</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">await</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">fetch</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'https://api.example.com'</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">data</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">await</span><span style=\"color: #ABB2BF\"> req</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">json</span><span style=\"color: #7A82DA\">();</span></span>\n<span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">finalData</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">cleanUpData</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">data</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #3FC56B\">doEpicShit</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">finalData</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So flat <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f607.svg\"></p>\n<h1 id=\"Callback-to-Promise\"><a class=\"heading-link\" href=\"./promisify-callbacks-in-nodejs#Callback-to-Promise\">#</a>Callback to Promise</h1>\n<p>Converting callbacks to promises in NodeJS is very simple. If you're using <code>fs.readdir</code>.</p>\n<p>We'll redefine it:</p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">readdirPromise</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">folderPath</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #10B1FE\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #FF6480\">Promise</span><span style=\"color: #7A82DA\">((</span><span style=\"color: #8BCDEF\">resolve</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">reject</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #10B1FE\">return</span><span style=\"color: #ABB2BF\"> fs</span><span style=\"color: #7A82DA\">.</span><span style=\"color: #3FC56B\">readdir</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">folderPath</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">(</span><span style=\"color: #8BCDEF\">err</span><span style=\"color: #7A82DA\">,</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #8BCDEF\">filenames</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      err </span><span style=\"color: #7A82DA\">!=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #10B1FE\">null</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">?</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">reject</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">err</span><span style=\"color: #7A82DA\">)</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">:</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">resolve</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">filenames</span><span style=\"color: #7A82DA\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7A82DA\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Just do it for every single function <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f609.svg\"></p>\n<p><strong>NOTE</strong>: The above part was a joke. You don't need to redefine every single callback function like that.</p>\n<h2 id=\"Serious-way...\"><a class=\"heading-link\" href=\"./promisify-callbacks-in-nodejs#Serious-way...\">#</a>Serious way...</h2>\n<p>Since Node 8, there's been a built-in helper function into Node, called <code>promisify</code>. It's the easiest way to promisify your callbacks. Check it out <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #282c34\"><code><span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">{</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">promisify</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">}</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">require</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #F9C859\">'util'</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #10B1FE\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #9F7EFE\">callbackP</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #7A82DA\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">promisify</span><span style=\"color: #7A82DA\">(</span><span style=\"color: #ABB2BF\">callback</span><span style=\"color: #7A82DA\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #10B1FE\">await</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #3FC56B\">callbackP</span><span style=\"color: #7A82DA\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it. Just pass your callback to <code>promisify</code>, and it will magically be <code>.then</code>able and <code>await</code>able.</p>\n<h1 id=\"About-filesystem-API...\"><a class=\"heading-link\" href=\"./promisify-callbacks-in-nodejs#About-filesystem-API...\">#</a>About filesystem API...</h1>\n<p>Most of the time, you'll end up needing promisification for the <code>fs</code> API in NodeJS. But there's a good news. <code>fs</code> <strong>already ships with promise based version of its functions</strong>.</p>\n<p>Check out my article to know this uncanny art: <a href=\"https://puruvj.dev/blog/fs-promises\" target=\"_blank\" rel=\"noopener\">Simple code with fs.promises and async await</a>.</p>\n<p>Hope you got something good out of it <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f607.svg\">.</p>\n<p>Thank you for reading.</p>\n","id":"promisify-callbacks-in-nodejs","reading_time":4.19,"toc":[{"indent":0,"id":"","title":"History lesson 😴","length":17},{"indent":0,"id":"","title":"Enter promises","length":14},{"indent":0,"id":"","title":"Callback to Promise","length":19},{"indent":1,"id":"","title":"Serious way...","length":14},{"indent":0,"id":"","title":"About filesystem API...","length":23}]}